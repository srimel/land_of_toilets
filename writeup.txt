Australia, Land of Toilets: The Final Write-Up
By Pete Wells, Stuart Rimel

\\Brief description



CREATE TABLE STATEMENTS
-------------------------------------------------------------------------------------------------------------------------------------------

We created 14 relational tables for our dataset. See the following create table statements that we used in our ETL:

# Create toilets table
def create_toilets_table(db_conn):
    cur = db_conn.cursor()
    create_stmt = "CREATE TABLE toilets(" \
                " FacilityID INT," \
                " URL VARCHAR(256)," \
                " Name VARCHAR(128)," \
                " Male BOOL,"\
                " Female BOOL,"\
                " Unisex BOOL,"\
                " AllGender BOOL,"\
                " ToiletNote VARCHAR(1024),"\
                " DrinkingWater BOOL,"\
                " Shower BOOL,"\
                " PRIMARY KEY (FacilityID));"
    cur.execute(create_stmt)


# Create handicap table
def create_handicap_table(db_conn):
    cur = db_conn.cursor()
    create_stmt = "CREATE TABLE handicap(" \
                " FacilityID INT," \
                " BYOSling BOOL,"\
                " Ambulant BOOL,"\
                " LHTransfer BOOL,"\
                " RHTransfer BOOL,"\
                " PRIMARY KEY (FacilityID),"\
                " CONSTRAINT handicap_fk FOREIGN KEY(FacilityID) "\
                " REFERENCES toilets(FacilityID));"
    cur.execute(create_stmt)


# Create changing table
def create_changing_table(db_conn):
    cur = db_conn.cursor()
    create_stmt = "CREATE TABLE changing(" \
                " FacilityID INT," \
                " BabyChange BOOL,"\
                " BabyCareRoom BOOL,"\
                " BabyChangeNote VARCHAR(400),"\
                " ACShower BOOL,"\
                " AdultChange BOOL,"\
                " AdultChangeNote VARCHAR(400),"\
                " ChangingPlaces BOOL,"\
                " PRIMARY KEY (FacilityID),"\
                " CONSTRAINT changing_fk FOREIGN KEY(FacilityID) "\
                " REFERENCES toilets(FacilityID));"
    cur.execute(create_stmt)


# Create access table
def create_access_table(db_conn):
    cur = db_conn.cursor()
    create_stmt = "CREATE TABLE access(" \
                " FacilityID INT," \
                " KeyRequired BOOL,"\
                " AccessNote VARCHAR(400),"\
                " PaymentRequired BOOL,"\
                " MLAK24 BOOL,"\
                " MLAKAfterHours BOOL,"\
                " OpeningHours VARCHAR(256),"\
                " OpeningHoursNote VARCHAR(400),"\
                " Accessible BOOL,"\
                " Parking BOOL,"\
                " ParkingAccessible BOOL,"\
                " ParkingNote VARCHAR(400),"\
                " PRIMARY KEY (FacilityID),"\
                " CONSTRAINT access_fk FOREIGN KEY(FacilityID) "\
                " REFERENCES toilets(FacilityID));"
    cur.execute(create_stmt)


# Create disposal table
def create_disposal_table(db_conn):
    cur = db_conn.cursor()
    create_stmt = "CREATE TABLE disposal(" \
                " FacilityID INT," \
                " SharpsDisposal BOOL,"\
                " SanitaryDisposal BOOL,"\
                " MensPadDisposal BOOL,"\
                " PRIMARY KEY (FacilityID),"\
                " CONSTRAINT disposal_fk FOREIGN KEY(FacilityID) "\
                " REFERENCES toilets(FacilityID));"
    cur.execute(create_stmt)


# Create dump_points table
def create_dump_points_table(db_conn):
    cur = db_conn.cursor()
    create_stmt = "CREATE TABLE dump_points(" \
                " FacilityID INT," \
                " DPWashout BOOL,"\
                " DPAfterHours BOOL,"\
                " DumpPointNote VARCHAR(400),"\
                " PRIMARY KEY (FacilityID),"\
                " CONSTRAINT dump_points_fk FOREIGN KEY(FacilityID) "\
                " REFERENCES toilets(FacilityID));"
    cur.execute(create_stmt)


# Create facility_types table
def create_facility_types_table(db_conn):
    cur = db_conn.cursor()
    create_stmt = "CREATE TABLE facility_types(" \
                " TypeID INT," \
                " Name VARCHAR(128),"\
                " PRIMARY KEY (TypeID));"
    cur.execute(create_stmt)


# Create facility_rel table
def create_facility_rel(db_conn):
    cur = db_conn.cursor()
    create_stmt = "CREATE TABLE facility_rel (" \
                  "  FacilityID  INT," \
                  "  TypeID   INT," \
                  "  PRIMARY KEY (FacilityID, TypeID)," \
                  "  CONSTRAINT facility_rel_fk FOREIGN KEY(TypeID) " \
                  "  REFERENCES facility_types(TypeID));"
    cur.execute(create_stmt)


# Create locations table
def create_locations(db_conn):
    cur = db_conn.cursor()
    create_stmt = "CREATE TABLE locations (" \
                  "  LocID  INT," \
                  "  Address1   VARCHAR(256)," \
                  "  Latitude   FLOAT," \
                  "  Longitude   FLOAT," \
                  "  AddressNote   VARCHAR(400)," \
                  "  PRIMARY KEY (LocID));"
    cur.execute(create_stmt)


# Create location_rel table
def create_location_rel(db_conn):
    cur = db_conn.cursor()
    create_stmt = "CREATE TABLE location_rel (" \
                  "  FacilityID  INT," \
                  "  LocID  INT," \
                  "  PRIMARY KEY (FacilityID, LocID)," \
                  "  CONSTRAINT fk_loc_id FOREIGN KEY(LocID) " \
                  "  REFERENCES locations(LocID));"
    cur.execute(create_stmt)


# Create states table
def create_states(db_conn):
    cur = db_conn.cursor()
    create_stmt = "CREATE TABLE states (" \
                  "  StateID  INT," \
                  "  State  VARCHAR(16)," \
                  "  PRIMARY KEY (StateID));"
    cur.execute(create_stmt)


# Create state_rel table
def create_state_rel(db_conn):
    cur = db_conn.cursor()
    create_stmt = "CREATE TABLE state_rel (" \
                  "  LocID  INT," \
                  "  StateID  INT," \
                  "  PRIMARY KEY (LocID, StateID)," \
                  "  CONSTRAINT fk_loc_id FOREIGN KEY(LocID) " \
                  "  REFERENCES locations(LocID));"
    cur.execute(create_stmt)


# Create towns table
def create_towns(db_conn):
    cur = db_conn.cursor()
    create_stmt = "CREATE TABLE towns (" \
                  "  TownID  INT," \
                  "  Town  VARCHAR(128)," \
                  "  PRIMARY KEY (TownID));"
    cur.execute(create_stmt)


# Create town_rel table
def create_town_rel(db_conn):
    cur = db_conn.cursor()
    create_stmt = "CREATE TABLE town_rel (" \
                  "  LocID  INT," \
                  "  TownID  INT," \
                  "  PRIMARY KEY (LocID, TownID)," \
                  "  CONSTRAINT fk_loc_id FOREIGN KEY(LocID) " \
                  "  REFERENCES locations(LocID));"
    cur.execute(create_stmt)



-------------------------------------------------------------------------------------------------------------------------------------------

